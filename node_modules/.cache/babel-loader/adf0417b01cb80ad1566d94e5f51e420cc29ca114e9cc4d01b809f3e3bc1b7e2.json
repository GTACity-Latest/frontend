{"ast":null,"code":"export default {\n  data() {\n    return {\n      showBar: false,\n      progText: '',\n      currentPercent: 100,\n      colour: 'rgba(0, 255, 42, 0.538)'\n    };\n  },\n  methods: {\n    startProgress(text, time) {\n      this.showBar = !this.showBar;\n      var totalTime = time;\n      this.progText = text;\n      var progressInt = setInterval(() => {\n        if (totalTime == 0) return clearInterval(progressInt), this.showBar = false, this.colour = 'rgba(0, 255, 42, 0.538)', this.currentPercent = 100;\n        this.currentPercent = Math.trunc(totalTime / time * 100);\n        const timeValues = [60, 50, 20, 15];\n        const colourValues = ['rgba(123, 255, 0, 0.538)', 'rgba(238, 255, 81, 0.538)', 'rgba(255, 156, 81, 0.538)', 'rgba(255, 81, 81, 0.538)'];\n        timeValues.find((item, i) => {\n          if (this.currentPercent <= item) {\n            this.colour = colourValues[i];\n            return;\n          }\n        });\n        totalTime--;\n      }, 1000);\n    }\n  }\n};","map":{"version":3,"names":["data","showBar","progText","currentPercent","colour","methods","startProgress","text","time","totalTime","progressInt","setInterval","clearInterval","Math","trunc","timeValues","colourValues","find","item","i"],"sources":["src/components/hud/progressBar.vue"],"sourcesContent":["<template>\n<Transition name=\"slide-fade\">\n    <div v-if=\"showBar\" style=\"position:absolute\">\n            <div class=\"barWrapper\">\n                <h4 style=\"margin-top: 0.5vw; position:absolute; margin-left: 21vw;\">{{progText}} {{currentPercent+'%'}}</h4>\n                <div id=\"bar\" style=\"color:white;\" :style=\"{ 'width': (currentPercent)+'%', 'background-color': (colour) }\"><b> </b></div>\n        </div>\n    </div>\n</Transition>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            showBar: false,\n            progText: '',\n            currentPercent: 100,\n            colour: 'rgba(0, 255, 42, 0.538)',\n        }\n    },\n    methods: {\n        startProgress(text, time) {\n            this.showBar = !this.showBar;\n            var totalTime = time;\n            this.progText = text;\n            var progressInt = setInterval(() => {\n                if(totalTime == 0) return clearInterval(progressInt), this.showBar = false, this.colour = 'rgba(0, 255, 42, 0.538)', this.currentPercent = 100;\n                this.currentPercent = Math.trunc((totalTime / time)*100);\n                const timeValues = [60, 50, 20, 15];\n                const colourValues = ['rgba(123, 255, 0, 0.538)', 'rgba(238, 255, 81, 0.538)', 'rgba(255, 156, 81, 0.538)', 'rgba(255, 81, 81, 0.538)'];\n\n                timeValues.find((item, i) => {\n                    if(this.currentPercent <= item) {\n                        this.colour = colourValues[i];\n                        return;\n                    }\n                })\n\n                totalTime--;\n            }, 1000);\n        }\n    },\n}\n\n</script>\n\n<style>\n.slide-fade-enter-active {\n    transition: all 0.6s ease-out;\n  }\n\n  .slide-fade-leave-active {\n    transition: all 0.6s cubic-bezier(1, 0.5, 0.8, 1);\n  }\n\n  .slide-fade-enter-from,\n  .slide-fade-leave-to {\n    transform: translateX(-10020px);\n    opacity: 0;\n  }\n\n.barWrapper {\n    text-align: center;\n    color: white;\n    margin-left: 25vw;\n    margin-right: 25vw;\n    margin-top: 40vw;\n    background-color: rgba(0, 0, 0, 0.353);\n    border-radius: 10px;\n    width: 50vw;\n    height: 2vw;\n}\n#bar {\n    float: right;\n    transition-duration: 2s;\n    height: 2vw;\n    border-radius: 10px;\n}\n\n</style>"],"mappings":"AAYA;EACAA,KAAA;IACA;MACAC,OAAA;MACAC,QAAA;MACAC,cAAA;MACAC,MAAA;IACA;EACA;EACAC,OAAA;IACAC,cAAAC,IAAA,EAAAC,IAAA;MACA,KAAAP,OAAA,SAAAA,OAAA;MACA,IAAAQ,SAAA,GAAAD,IAAA;MACA,KAAAN,QAAA,GAAAK,IAAA;MACA,IAAAG,WAAA,GAAAC,WAAA;QACA,IAAAF,SAAA,cAAAG,aAAA,CAAAF,WAAA,QAAAT,OAAA,eAAAG,MAAA,mCAAAD,cAAA;QACA,KAAAA,cAAA,GAAAU,IAAA,CAAAC,KAAA,CAAAL,SAAA,GAAAD,IAAA;QACA,MAAAO,UAAA;QACA,MAAAC,YAAA;QAEAD,UAAA,CAAAE,IAAA,EAAAC,IAAA,EAAAC,CAAA;UACA,SAAAhB,cAAA,IAAAe,IAAA;YACA,KAAAd,MAAA,GAAAY,YAAA,CAAAG,CAAA;YACA;UACA;QACA;QAEAV,SAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}